#%RAML 1.0
---
title: API Identity micro-services
baseUri: http://api.com/{version}
version: v1

/jwks:
  description: Obtain public cryptographic keys for signature validation and encryption.
  get:
    description: Obtain public cryptographic keys for signature validation and encryption.
    responses:
      200:
        description: Pair of keys.
        body:
          application/json:
            example: |
              {
                "keys": [{
                  "kty": "RSA",
                  "use": "sig",
                  "kid": "P9Zd",
                  "e": "AQAB",
                  "n": "kWp2zRA23Z3vTL4uoe8kTFptxBVFunIoP4t_8TDYJrOb7D1iZNDXVeEsYKp6ppmrTZDAgd-cNOTKLd4M39WJc5FN0maTAVKJc7NxklDeKc4dMe1BGvTZNG4MpWBo-taKULlYUu0ltYJuLzOjIrTHfarucrGoRWqM0sl3z2-fv9k"
                }]
              }

/register:
  description: Register a user.
  post:
    description: Register a user.
    body: 
      application/json:
        example: |
          {
              "username": "JeanPierre",
              "email": "jean.pierre@stone.com",
              "firstName": "Jean",
              "lastName": "Pierre",
              "password": "7304798ee32d1222b221734e0efef88d"
          }
    responses:
      204:
        description: User created.
      400:
        description: Error with the passed parameters.
        
/login:
  description: "Log-in a user using it's credentials."
  post:
    description: "Log-in a user using it's credentials."
    body:
      application/json:
        example: |
          {
              "email": "jean.pierre@stone.com",
              "password": "7304798ee32d1222b221734e0efef88d"
          }
    responses:
      200:
        description: "User logged in with correct credentials."
        body:
          application/json:
            example: |
              {
                  "status": "You're logged in.",
                  "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkplYW4gUGllcnJlIiwiaWF0IjoxNTE2MjM5MDIyfQ.jnwOHy2wQm1LG5upI_y0lr0u9dN8yBQUWR0uKH15jWE"
              }
      401:
        description: No credentials or invalid credentials.
        
/logout:
  description: "Log out a user using it's JWT."
  post:
    securedBy: [ jwt ]
    description: Log out a user using it's JWT.

/introspection:
  description: Verify token and grants.
  get:
    description: Send token for verification.
    body:
      application/json:
        example: |
          {
              "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkplYW4gUGllcnJlIiwiaWF0IjoxNTE2MjM5MDIyfQ.jnwOHy2wQm1LG5upI_y0lr0u9dN8yBQUWR0uKH15jWE"
          }
    responses:
      200:
        description: "Token informations."
        body:
          application/json:
            example: |
              {
                "grants": "admin"
                "validity": "valid"
              }
      404:
        description: "Token not found."
    
/userinfo:
  description: Get user informations.
  get:
    securedBy: [ jwt ]
    description: Get user informations.
    responses:
      200:
        description: "User informations."
        body:
          application/json:
            example: |
              {
                "id": "64638d9f85e0d9a95b97a8e2"
                "username": "JeanPierre",
                "email": "jean.pierre@stone.com",
                "firstName": "Jean",
                "lastName": "Pierre"
              }
      404:
        description: "User not found."

securitySchemes:
  jwt:
    description: JWT Bearer token.
    type: x-jwt
    describedBy:
      responses:
        401:
          description: Bad token.
        204: 
          description: Token valid.
      headers:
        Authorization:
          description: Bearer token.
          type: string
          example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkplYW4gUGllcnJlIiwiaWF0IjoxNTE2MjM5MDIyfQ.jnwOHy2wQm1LG5upI_y0lr0u9dN8yBQUWR0uKH15jWE"
